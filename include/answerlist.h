// Autogenerated GBA Huffman Compression Header File using ./bin/huffman.elf by Burton O Sumner 2024 (C)
// ---------------------------------------------------------------------------------------
// Input File Name:		answerlist.raw
// Input File Original Size:	13856 (Padded to 4-byte alignment)
// ---------------------------------------------------------------------------------------
// Compressed Data Name:	answerlist
// Compressed Data Size:	7436 (Padded to 4-byte alignment)
// ---------------------------------------------------------------------------------------
// Huffman Tree Node Count:	53
// Huffman Tree Size:		55
// Huffcode Bitdepth:		8
// ---------------------------------------------------------------------------------------


#ifndef _ANSWERLIST_H_
#define _ANSWERLIST_H_

#ifdef __cplusplus
extern "C" {
#else
#include <stdbool.h>
#endif  /* C++ name mangler guard opener */

// Use this macro to declare the empty data buffer you want the decompressed data stored in.
#define answerlist_Decompressed_Data_Size 13856

/* Use the below macro to know how large the tree table is. To get offset of raw compressed data,
 * add size of header ( PLUS 1 for the tree node count byte situated, contiguously, between the header and the root node
 * entry of the huffman tree table): raw compressed data addr is %s_Huffman_Compression_Data + sizeof(GBA_Huffman_Compression_Header_t) + 1 + %s_Huffman_Tree_Size
 * */
#define answerlist_Huffman_Tree_Size 55

/**
 * This is the pointer you need to pass to SVC for GBA's BIOS-provided Huffman Decompression routine
 * via R0 (aka function param 0)
 * */
extern const unsigned int answerlist_Huffman_Compression_Data[1874];

/* Define header bitfield structs only if they weren't already
 * defined in another huffcode data file, hence the nested header guard here
 * */
#ifndef _GBA_HUFFDECOMP_HDR_FIELD_TYPEDEFS_
#define _GBA_HUFFDECOMP_HDR_FIELD_TYPEDEFS_

/* Below are some helpful typedefs and macros to get an idea how the above
 * compression data is formatted:
 * */

typedef struct {
	unsigned int huffcode_bit_depth : 4;  /// How many bits of is encoded in data each huffman code
	const unsigned int RESERVED_ID_FIELD : 4;  /// Reserved field, used by BIOS routine to identify compression type
	unsigned int decompressed_data_size : 24;  /// Size of data after being decompressed
} __attribute__ ((packed)) GBA_Huffman_Compression_Header_t;

typedef struct {
	unsigned int descendants_ofs : 6;  /// Offset from current node to its child nodes
	bool r_is_leaf : 1;  /// True:= This node's right child node is a leaf, not a subroot
	bool l_is_leaf : 1;  /// True:= This node's left child node is a leaf, not a subroot
} __attribute__ ((packed)) GBA_Huffman_Tree_Subroot_t;

typedef union {
	GBA_Huffman_Tree_Subroot_t subroot;  /// Access this union field if node is a subroot
	unsigned char leaf;  // Access this union field if node is a leaf;
	                     // leaves give the value encoded by the huffman code their position in the tree yields
} __attribute__ ((packed)) GBA_Huffman_Tree_Node_t;

#endif  /* _GBA_HUFFDECOMP_HDR_FIELD_TYPEDEFS_ */

extern const GBA_Huffman_Compression_Header_t answerlist_Huffman_Compression_Header;
extern const GBA_Huffman_Tree_Node_t answerlist_Huffman_Tree_Nodes_Table[answerlist_Huffman_Tree_Size];
extern const unsigned int answerlist_Huffman_Raw_Compressed_Data[1859];


#ifdef __cplusplus
}
#endif  /* C++ name mangler guard closer */

#endif  /* _ANSWERLIST_H_ */
